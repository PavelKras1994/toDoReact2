{"version":3,"sources":["components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["List","state","toDoList","createdDo","complitedDo","createDo","e","tempCreatedDo","value","target","setState","pushDo","tempCreatedDo2","tempToDoList","push","complitDo","i","n","tempToDolist2","tempComplitedDo","splice","delDo","tempComplitedDo2","className","onChange","this","onClick","map","alt","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAyFeA,G,kNApFXC,MAAQ,CACJC,SAAU,GACVC,UAAW,GACXC,YAAa,I,EAGjBC,SAAW,SAACC,GACR,IAAIC,EAAgB,CAChBC,MAAOF,EAAEG,OAAOD,OAEpB,EAAKE,SAAS,CACVP,UAAWI,K,EAInBI,OAAS,WACL,IAAIC,EAAiB,EAAKX,MAAME,UAC5BU,EAAe,EAAKZ,MAAMC,SAC9BW,EAAaC,KAAKF,GAClB,EAAKF,SAAS,CACVR,SAAUW,K,EAIlBE,UAAY,SAACC,EAAGC,GACZ,IAAIC,EAAgB,EAAKjB,MAAMC,SAC3BiB,EAAkB,EAAKlB,MAAMG,YACjCe,EAAgBL,KAAKE,GACrBE,EAAcE,OAAOH,EAAG,GACxB,EAAKP,SAAU,CACXR,SAAUgB,EACVd,YAAae,K,EAIrBE,MAAO,SAACJ,GACJ,IAAIK,EAAmB,EAAKrB,MAAMG,YAClCkB,EAAiBF,OAAOH,EAAE,GAC1B,EAAKP,SAAU,CACXS,gBAAiBG,K,uDAGf,IAAD,OACL,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,YACf,2BAAOC,SAAUC,KAAKpB,WACtB,6BACA,4BAAQqB,QAASD,KAAKd,QAAtB,SACA,6BACA,iCAAM,qGACN,wBAAIY,UAAU,UAENE,KAAKxB,MAAMC,SAASyB,KAChB,SAACX,EAAGC,GAAJ,OACI,wBAAIM,UAAU,MACTP,EAAER,MACH,yBAAKe,UAAU,UAAUG,QAAS,kBAAM,EAAKX,UAAUC,EAAGC,KAC1D,yBAAKW,IAAI,UAAUC,IAAI,wIAM3C,6BAAK,8HACL,wBAAIN,UAAU,UAENE,KAAKxB,MAAMG,YAAYuB,KACnB,SAACX,EAAGC,GAAJ,OACJ,wBAAIM,UAAU,MACTP,EAAER,MACH,yBAAKe,UAAU,MAAMG,QAAS,kBAAM,EAAKL,MAAMJ,KAC/C,yBAAKW,IAAI,MAAMC,IAAI,8F,GAzE5BC,cCOJC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCMcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.288ac10f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './List.scss';\r\n\r\nclass List extends Component {\r\n    state = {\r\n        toDoList: [],\r\n        createdDo: {},\r\n        complitedDo: []\r\n    }\r\n\r\n    createDo = (e) => {\r\n        let tempCreatedDo = {\r\n            value: e.target.value,\r\n        }\r\n        this.setState({\r\n            createdDo: tempCreatedDo\r\n        })\r\n    }\r\n\r\n    pushDo = () => {\r\n        let tempCreatedDo2 = this.state.createdDo\r\n        let tempToDoList = this.state.toDoList\r\n        tempToDoList.push(tempCreatedDo2)\r\n        this.setState({\r\n            toDoList: tempToDoList\r\n        })\r\n    }\r\n\r\n    complitDo = (i, n) => {\r\n        let tempToDolist2 = this.state.toDoList\r\n        let tempComplitedDo = this.state.complitedDo\r\n        tempComplitedDo.push(i)\r\n        tempToDolist2.splice(n, 1)\r\n        this.setState ({\r\n            toDoList: tempToDolist2,\r\n            complitedDo: tempComplitedDo\r\n        })\r\n    }\r\n\r\n    delDo =(n) => {\r\n        let tempComplitedDo2 = this.state.complitedDo\r\n        tempComplitedDo2.splice(n,1)\r\n        this.setState ({\r\n            tempComplitedDo: tempComplitedDo2\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"List\">\r\n                <div className='ToDoList'>\r\n                <input onChange={this.createDo} />\r\n                <br/>\r\n                <button onClick={this.pushDo}> Add </button>\r\n                <br/>\r\n                <div> <b>Текущие дела: </b></div>\r\n                <ul className=\"doings\">\r\n                    {\r\n                        this.state.toDoList.map(\r\n                            (i, n) =>\r\n                                <li className=\"do\">\r\n                                    {i.value}\r\n                                    <div className=\"complit\" onClick={() => this.complitDo(i, n)}> \r\n                                    <img alt=\"complit\" src=\"https://img1.freepng.ru/20180208/lew/kisspng-check-mark-x-mark-clip-art-check-marks-5a7c0970394fe9.8780805115180783202348.jpg\"/> \r\n                                    </div>\r\n                                </li>\r\n                        )\r\n                    }\r\n                </ul>\r\n                <div><b> Выполненные дела: </b></div>\r\n                <ul className=\"doings\">\r\n                    {\r\n                        this.state.complitedDo.map(\r\n                            (i, n) => \r\n                        <li className=\"do\">\r\n                            {i.value}\r\n                            <div className=\"del\" onClick={() => this.delDo(n)}> \r\n                            <img alt=\"del\" src=\"https://s1.iconbird.com/ico/0612/prettyoffice/w256h2561339405847Delete256.png\"/> \r\n                            </div>\r\n                        </li>\r\n                        )\r\n                    }\r\n                </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\nimport './App.scss';\nimport List from './components/List/List'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}